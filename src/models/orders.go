// Code generated by BobGen psql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Order is an object representing the database table.
type Order struct {
	OrderID    int32               `db:"order_id,pk" `
	CustomerID null.Val[int32]     `db:"customer_id" `
	ProductID  null.Val[int32]     `db:"product_id" `
	Quantity   int32               `db:"quantity" `
	OrderDate  null.Val[time.Time] `db:"order_date" `

	R orderR `db:"-" `
}

// OrderSlice is an alias for a slice of pointers to Order.
// This should almost always be used instead of []*Order.
type OrderSlice []*Order

// Orders contains methods to work with the orders table
var Orders = psql.NewTablex[*Order, OrderSlice, *OrderSetter]("", "orders")

// OrdersQuery is a query on the orders table
type OrdersQuery = *psql.ViewQuery[*Order, OrderSlice]

// OrdersStmt is a prepared statment on orders
type OrdersStmt = bob.QueryStmt[*Order, OrderSlice]

// orderR is where relationships are stored.
type orderR struct {
	Customer *Customer // orders.orders_customer_id_fkey
	Product  *Product  // orders.orders_product_id_fkey
}

// OrderSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type OrderSetter struct {
	OrderID    omit.Val[int32]         `db:"order_id,pk" `
	CustomerID omitnull.Val[int32]     `db:"customer_id" `
	ProductID  omitnull.Val[int32]     `db:"product_id" `
	Quantity   omit.Val[int32]         `db:"quantity" `
	OrderDate  omitnull.Val[time.Time] `db:"order_date" `
}

func (s OrderSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if !s.OrderID.IsUnset() {
		vals = append(vals, "order_id")
	}

	if !s.CustomerID.IsUnset() {
		vals = append(vals, "customer_id")
	}

	if !s.ProductID.IsUnset() {
		vals = append(vals, "product_id")
	}

	if !s.Quantity.IsUnset() {
		vals = append(vals, "quantity")
	}

	if !s.OrderDate.IsUnset() {
		vals = append(vals, "order_date")
	}

	return vals
}

func (s OrderSetter) Overwrite(t *Order) {
	if !s.OrderID.IsUnset() {
		t.OrderID, _ = s.OrderID.Get()
	}
	if !s.CustomerID.IsUnset() {
		t.CustomerID, _ = s.CustomerID.GetNull()
	}
	if !s.ProductID.IsUnset() {
		t.ProductID, _ = s.ProductID.GetNull()
	}
	if !s.Quantity.IsUnset() {
		t.Quantity, _ = s.Quantity.Get()
	}
	if !s.OrderDate.IsUnset() {
		t.OrderDate, _ = s.OrderDate.GetNull()
	}
}

func (s OrderSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 5)
	if s.OrderID.IsUnset() {
		vals[0] = psql.Raw("DEFAULT")
	} else {
		vals[0] = psql.Arg(s.OrderID)
	}

	if s.CustomerID.IsUnset() {
		vals[1] = psql.Raw("DEFAULT")
	} else {
		vals[1] = psql.Arg(s.CustomerID)
	}

	if s.ProductID.IsUnset() {
		vals[2] = psql.Raw("DEFAULT")
	} else {
		vals[2] = psql.Arg(s.ProductID)
	}

	if s.Quantity.IsUnset() {
		vals[3] = psql.Raw("DEFAULT")
	} else {
		vals[3] = psql.Arg(s.Quantity)
	}

	if s.OrderDate.IsUnset() {
		vals[4] = psql.Raw("DEFAULT")
	} else {
		vals[4] = psql.Arg(s.OrderDate)
	}

	return im.Values(vals...)
}

func (s OrderSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s OrderSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if !s.OrderID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "order_id")...),
			psql.Arg(s.OrderID),
		}})
	}

	if !s.CustomerID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "customer_id")...),
			psql.Arg(s.CustomerID),
		}})
	}

	if !s.ProductID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "product_id")...),
			psql.Arg(s.ProductID),
		}})
	}

	if !s.Quantity.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "quantity")...),
			psql.Arg(s.Quantity),
		}})
	}

	if !s.OrderDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "order_date")...),
			psql.Arg(s.OrderDate),
		}})
	}

	return exprs
}

type orderColumnNames struct {
	OrderID    string
	CustomerID string
	ProductID  string
	Quantity   string
	OrderDate  string
}

var OrderColumns = buildOrderColumns("orders")

type orderColumns struct {
	tableAlias string
	OrderID    psql.Expression
	CustomerID psql.Expression
	ProductID  psql.Expression
	Quantity   psql.Expression
	OrderDate  psql.Expression
}

func (c orderColumns) Alias() string {
	return c.tableAlias
}

func (orderColumns) AliasedAs(alias string) orderColumns {
	return buildOrderColumns(alias)
}

func buildOrderColumns(alias string) orderColumns {
	return orderColumns{
		tableAlias: alias,
		OrderID:    psql.Quote(alias, "order_id"),
		CustomerID: psql.Quote(alias, "customer_id"),
		ProductID:  psql.Quote(alias, "product_id"),
		Quantity:   psql.Quote(alias, "quantity"),
		OrderDate:  psql.Quote(alias, "order_date"),
	}
}

type orderWhere[Q psql.Filterable] struct {
	OrderID    psql.WhereMod[Q, int32]
	CustomerID psql.WhereNullMod[Q, int32]
	ProductID  psql.WhereNullMod[Q, int32]
	Quantity   psql.WhereMod[Q, int32]
	OrderDate  psql.WhereNullMod[Q, time.Time]
}

func (orderWhere[Q]) AliasedAs(alias string) orderWhere[Q] {
	return buildOrderWhere[Q](buildOrderColumns(alias))
}

func buildOrderWhere[Q psql.Filterable](cols orderColumns) orderWhere[Q] {
	return orderWhere[Q]{
		OrderID:    psql.Where[Q, int32](cols.OrderID),
		CustomerID: psql.WhereNull[Q, int32](cols.CustomerID),
		ProductID:  psql.WhereNull[Q, int32](cols.ProductID),
		Quantity:   psql.Where[Q, int32](cols.Quantity),
		OrderDate:  psql.WhereNull[Q, time.Time](cols.OrderDate),
	}
}

type orderJoins[Q dialect.Joinable] struct {
	typ      string
	Customer func(context.Context) modAs[Q, customerColumns]
	Product  func(context.Context) modAs[Q, productColumns]
}

func (j orderJoins[Q]) aliasedAs(alias string) orderJoins[Q] {
	return buildOrderJoins[Q](buildOrderColumns(alias), j.typ)
}

func buildOrderJoins[Q dialect.Joinable](cols orderColumns, typ string) orderJoins[Q] {
	return orderJoins[Q]{
		typ:      typ,
		Customer: ordersJoinCustomer[Q](cols, typ),
		Product:  ordersJoinProduct[Q](cols, typ),
	}
}

// FindOrder retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindOrder(ctx context.Context, exec bob.Executor, OrderIDPK int32, cols ...string) (*Order, error) {
	if len(cols) == 0 {
		return Orders.Query(
			ctx, exec,
			SelectWhere.Orders.OrderID.EQ(OrderIDPK),
		).One()
	}

	return Orders.Query(
		ctx, exec,
		SelectWhere.Orders.OrderID.EQ(OrderIDPK),
		sm.Columns(Orders.Columns().Only(cols...)),
	).One()
}

// OrderExists checks the presence of a single record by primary key
func OrderExists(ctx context.Context, exec bob.Executor, OrderIDPK int32) (bool, error) {
	return Orders.Query(
		ctx, exec,
		SelectWhere.Orders.OrderID.EQ(OrderIDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Order
func (o *Order) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.OrderID)
}

// Update uses an executor to update the Order
func (o *Order) Update(ctx context.Context, exec bob.Executor, s *OrderSetter) error {
	return Orders.Update(ctx, exec, s, o)
}

// Delete deletes a single Order record with an executor
func (o *Order) Delete(ctx context.Context, exec bob.Executor) error {
	return Orders.Delete(ctx, exec, o)
}

// Reload refreshes the Order using the executor
func (o *Order) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Orders.Query(
		ctx, exec,
		SelectWhere.Orders.OrderID.EQ(o.OrderID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o OrderSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals OrderSetter) error {
	return Orders.Update(ctx, exec, &vals, o...)
}

func (o OrderSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Orders.Delete(ctx, exec, o...)
}

func (o OrderSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	OrderIDPK := make([]int32, len(o))

	for i, o := range o {
		OrderIDPK[i] = o.OrderID
	}

	mods = append(mods,
		SelectWhere.Orders.OrderID.In(OrderIDPK...),
	)

	o2, err := Orders.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.OrderID != old.OrderID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func ordersJoinCustomer[Q dialect.Joinable](from orderColumns, typ string) func(context.Context) modAs[Q, customerColumns] {
	return func(ctx context.Context) modAs[Q, customerColumns] {
		return modAs[Q, customerColumns]{
			c: CustomerColumns,
			f: func(to customerColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Customers.Name(ctx).As(to.Alias())).On(
						to.CustomerID.EQ(from.CustomerID),
					))
				}

				return mods
			},
		}
	}
}

func ordersJoinProduct[Q dialect.Joinable](from orderColumns, typ string) func(context.Context) modAs[Q, productColumns] {
	return func(ctx context.Context) modAs[Q, productColumns] {
		return modAs[Q, productColumns]{
			c: ProductColumns,
			f: func(to productColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Products.Name(ctx).As(to.Alias())).On(
						to.ProductID.EQ(from.ProductID),
					))
				}

				return mods
			},
		}
	}
}

// Customer starts a query for related objects on customers
func (o *Order) Customer(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) CustomersQuery {
	return Customers.Query(ctx, exec, append(mods,
		sm.Where(CustomerColumns.CustomerID.EQ(psql.Arg(o.CustomerID))),
	)...)
}

func (os OrderSlice) Customer(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) CustomersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.CustomerID)
	}

	return Customers.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(CustomerColumns.CustomerID).In(PKArgs...)),
	)...)
}

// Product starts a query for related objects on products
func (o *Order) Product(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) ProductsQuery {
	return Products.Query(ctx, exec, append(mods,
		sm.Where(ProductColumns.ProductID.EQ(psql.Arg(o.ProductID))),
	)...)
}

func (os OrderSlice) Product(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) ProductsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ProductID)
	}

	return Products.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(ProductColumns.ProductID).In(PKArgs...)),
	)...)
}

func (o *Order) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Customer":
		rel, ok := retrieved.(*Customer)
		if !ok {
			return fmt.Errorf("order cannot load %T as %q", retrieved, name)
		}

		o.R.Customer = rel

		if rel != nil {
			rel.R.Orders = OrderSlice{o}
		}
		return nil
	case "Product":
		rel, ok := retrieved.(*Product)
		if !ok {
			return fmt.Errorf("order cannot load %T as %q", retrieved, name)
		}

		o.R.Product = rel

		if rel != nil {
			rel.R.Orders = OrderSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("order has no relationship %q", name)
	}
}

func PreloadOrderCustomer(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Customer, CustomerSlice](orm.Relationship{
		Name: "Customer",
		Sides: []orm.RelSide{
			{
				From: "orders",
				To:   TableNames.Customers,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Customers.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Orders.CustomerID,
				},
				ToColumns: []string{
					ColumnNames.Customers.CustomerID,
				},
			},
		},
	}, Customers.Columns().Names(), opts...)
}

func ThenLoadOrderCustomer(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadOrderCustomer(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load OrderCustomer", retrieved)
		}

		err := loader.LoadOrderCustomer(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadOrderCustomer loads the order's Customer into the .R struct
func (o *Order) LoadOrderCustomer(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Customer = nil

	related, err := o.Customer(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.Orders = OrderSlice{o}

	o.R.Customer = related
	return nil
}

// LoadOrderCustomer loads the order's Customer into the .R struct
func (os OrderSlice) LoadOrderCustomer(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	customers, err := os.Customer(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range customers {
			if o.CustomerID.GetOrZero() != rel.CustomerID {
				continue
			}

			rel.R.Orders = append(rel.R.Orders, o)

			o.R.Customer = rel
			break
		}
	}

	return nil
}

func PreloadOrderProduct(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Product, ProductSlice](orm.Relationship{
		Name: "Product",
		Sides: []orm.RelSide{
			{
				From: "orders",
				To:   TableNames.Products,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Products.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Orders.ProductID,
				},
				ToColumns: []string{
					ColumnNames.Products.ProductID,
				},
			},
		},
	}, Products.Columns().Names(), opts...)
}

func ThenLoadOrderProduct(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadOrderProduct(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load OrderProduct", retrieved)
		}

		err := loader.LoadOrderProduct(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadOrderProduct loads the order's Product into the .R struct
func (o *Order) LoadOrderProduct(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Product = nil

	related, err := o.Product(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.Orders = OrderSlice{o}

	o.R.Product = related
	return nil
}

// LoadOrderProduct loads the order's Product into the .R struct
func (os OrderSlice) LoadOrderProduct(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	products, err := os.Product(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range products {
			if o.ProductID.GetOrZero() != rel.ProductID {
				continue
			}

			rel.R.Orders = append(rel.R.Orders, o)

			o.R.Product = rel
			break
		}
	}

	return nil
}

func attachOrderCustomer0(ctx context.Context, exec bob.Executor, count int, order0 *Order, customer1 *Customer) (*Order, error) {
	setter := &OrderSetter{
		CustomerID: omitnull.From(customer1.CustomerID),
	}

	err := Orders.Update(ctx, exec, setter, order0)
	if err != nil {
		return nil, fmt.Errorf("attachOrderCustomer0: %w", err)
	}

	return order0, nil
}

func (order0 *Order) InsertCustomer(ctx context.Context, exec bob.Executor, related *CustomerSetter) error {
	customer1, err := Customers.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachOrderCustomer0(ctx, exec, 1, order0, customer1)
	if err != nil {
		return err
	}

	order0.R.Customer = customer1

	customer1.R.Orders = append(customer1.R.Orders, order0)

	return nil
}

func (order0 *Order) AttachCustomer(ctx context.Context, exec bob.Executor, customer1 *Customer) error {
	var err error

	_, err = attachOrderCustomer0(ctx, exec, 1, order0, customer1)
	if err != nil {
		return err
	}

	order0.R.Customer = customer1

	customer1.R.Orders = append(customer1.R.Orders, order0)

	return nil
}

func attachOrderProduct0(ctx context.Context, exec bob.Executor, count int, order0 *Order, product1 *Product) (*Order, error) {
	setter := &OrderSetter{
		ProductID: omitnull.From(product1.ProductID),
	}

	err := Orders.Update(ctx, exec, setter, order0)
	if err != nil {
		return nil, fmt.Errorf("attachOrderProduct0: %w", err)
	}

	return order0, nil
}

func (order0 *Order) InsertProduct(ctx context.Context, exec bob.Executor, related *ProductSetter) error {
	product1, err := Products.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachOrderProduct0(ctx, exec, 1, order0, product1)
	if err != nil {
		return err
	}

	order0.R.Product = product1

	product1.R.Orders = append(product1.R.Orders, order0)

	return nil
}

func (order0 *Order) AttachProduct(ctx context.Context, exec bob.Executor, product1 *Product) error {
	var err error

	_, err = attachOrderProduct0(ctx, exec, 1, order0, product1)
	if err != nil {
		return err
	}

	order0.R.Product = product1

	product1.R.Orders = append(product1.R.Orders, order0)

	return nil
}
