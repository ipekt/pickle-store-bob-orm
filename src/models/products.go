// Code generated by BobGen psql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
)

// Product is an object representing the database table.
type Product struct {
	ProductID     int32            `db:"product_id,pk" `
	Name          string           `db:"name" `
	Description   null.Val[string] `db:"description" `
	Price         decimal.Decimal  `db:"price" `
	StockQuantity int32            `db:"stock_quantity" `

	R productR `db:"-" `
}

// ProductSlice is an alias for a slice of pointers to Product.
// This should almost always be used instead of []*Product.
type ProductSlice []*Product

// Products contains methods to work with the products table
var Products = psql.NewTablex[*Product, ProductSlice, *ProductSetter]("", "products")

// ProductsQuery is a query on the products table
type ProductsQuery = *psql.ViewQuery[*Product, ProductSlice]

// ProductsStmt is a prepared statment on products
type ProductsStmt = bob.QueryStmt[*Product, ProductSlice]

// productR is where relationships are stored.
type productR struct {
	Orders OrderSlice // orders.orders_product_id_fkey
}

// ProductSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ProductSetter struct {
	ProductID     omit.Val[int32]           `db:"product_id,pk" `
	Name          omit.Val[string]          `db:"name" `
	Description   omitnull.Val[string]      `db:"description" `
	Price         omit.Val[decimal.Decimal] `db:"price" `
	StockQuantity omit.Val[int32]           `db:"stock_quantity" `
}

func (s ProductSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if !s.ProductID.IsUnset() {
		vals = append(vals, "product_id")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}

	if !s.Price.IsUnset() {
		vals = append(vals, "price")
	}

	if !s.StockQuantity.IsUnset() {
		vals = append(vals, "stock_quantity")
	}

	return vals
}

func (s ProductSetter) Overwrite(t *Product) {
	if !s.ProductID.IsUnset() {
		t.ProductID, _ = s.ProductID.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.Description.IsUnset() {
		t.Description, _ = s.Description.GetNull()
	}
	if !s.Price.IsUnset() {
		t.Price, _ = s.Price.Get()
	}
	if !s.StockQuantity.IsUnset() {
		t.StockQuantity, _ = s.StockQuantity.Get()
	}
}

func (s ProductSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 5)
	if s.ProductID.IsUnset() {
		vals[0] = psql.Raw("DEFAULT")
	} else {
		vals[0] = psql.Arg(s.ProductID)
	}

	if s.Name.IsUnset() {
		vals[1] = psql.Raw("DEFAULT")
	} else {
		vals[1] = psql.Arg(s.Name)
	}

	if s.Description.IsUnset() {
		vals[2] = psql.Raw("DEFAULT")
	} else {
		vals[2] = psql.Arg(s.Description)
	}

	if s.Price.IsUnset() {
		vals[3] = psql.Raw("DEFAULT")
	} else {
		vals[3] = psql.Arg(s.Price)
	}

	if s.StockQuantity.IsUnset() {
		vals[4] = psql.Raw("DEFAULT")
	} else {
		vals[4] = psql.Arg(s.StockQuantity)
	}

	return im.Values(vals...)
}

func (s ProductSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s ProductSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if !s.ProductID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "product_id")...),
			psql.Arg(s.ProductID),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "description")...),
			psql.Arg(s.Description),
		}})
	}

	if !s.Price.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "price")...),
			psql.Arg(s.Price),
		}})
	}

	if !s.StockQuantity.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "stock_quantity")...),
			psql.Arg(s.StockQuantity),
		}})
	}

	return exprs
}

type productColumnNames struct {
	ProductID     string
	Name          string
	Description   string
	Price         string
	StockQuantity string
}

var ProductColumns = buildProductColumns("products")

type productColumns struct {
	tableAlias    string
	ProductID     psql.Expression
	Name          psql.Expression
	Description   psql.Expression
	Price         psql.Expression
	StockQuantity psql.Expression
}

func (c productColumns) Alias() string {
	return c.tableAlias
}

func (productColumns) AliasedAs(alias string) productColumns {
	return buildProductColumns(alias)
}

func buildProductColumns(alias string) productColumns {
	return productColumns{
		tableAlias:    alias,
		ProductID:     psql.Quote(alias, "product_id"),
		Name:          psql.Quote(alias, "name"),
		Description:   psql.Quote(alias, "description"),
		Price:         psql.Quote(alias, "price"),
		StockQuantity: psql.Quote(alias, "stock_quantity"),
	}
}

type productWhere[Q psql.Filterable] struct {
	ProductID     psql.WhereMod[Q, int32]
	Name          psql.WhereMod[Q, string]
	Description   psql.WhereNullMod[Q, string]
	Price         psql.WhereMod[Q, decimal.Decimal]
	StockQuantity psql.WhereMod[Q, int32]
}

func (productWhere[Q]) AliasedAs(alias string) productWhere[Q] {
	return buildProductWhere[Q](buildProductColumns(alias))
}

func buildProductWhere[Q psql.Filterable](cols productColumns) productWhere[Q] {
	return productWhere[Q]{
		ProductID:     psql.Where[Q, int32](cols.ProductID),
		Name:          psql.Where[Q, string](cols.Name),
		Description:   psql.WhereNull[Q, string](cols.Description),
		Price:         psql.Where[Q, decimal.Decimal](cols.Price),
		StockQuantity: psql.Where[Q, int32](cols.StockQuantity),
	}
}

type productJoins[Q dialect.Joinable] struct {
	typ    string
	Orders func(context.Context) modAs[Q, orderColumns]
}

func (j productJoins[Q]) aliasedAs(alias string) productJoins[Q] {
	return buildProductJoins[Q](buildProductColumns(alias), j.typ)
}

func buildProductJoins[Q dialect.Joinable](cols productColumns, typ string) productJoins[Q] {
	return productJoins[Q]{
		typ:    typ,
		Orders: productsJoinOrders[Q](cols, typ),
	}
}

// FindProduct retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindProduct(ctx context.Context, exec bob.Executor, ProductIDPK int32, cols ...string) (*Product, error) {
	if len(cols) == 0 {
		return Products.Query(
			ctx, exec,
			SelectWhere.Products.ProductID.EQ(ProductIDPK),
		).One()
	}

	return Products.Query(
		ctx, exec,
		SelectWhere.Products.ProductID.EQ(ProductIDPK),
		sm.Columns(Products.Columns().Only(cols...)),
	).One()
}

// ProductExists checks the presence of a single record by primary key
func ProductExists(ctx context.Context, exec bob.Executor, ProductIDPK int32) (bool, error) {
	return Products.Query(
		ctx, exec,
		SelectWhere.Products.ProductID.EQ(ProductIDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Product
func (o *Product) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ProductID)
}

// Update uses an executor to update the Product
func (o *Product) Update(ctx context.Context, exec bob.Executor, s *ProductSetter) error {
	return Products.Update(ctx, exec, s, o)
}

// Delete deletes a single Product record with an executor
func (o *Product) Delete(ctx context.Context, exec bob.Executor) error {
	return Products.Delete(ctx, exec, o)
}

// Reload refreshes the Product using the executor
func (o *Product) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Products.Query(
		ctx, exec,
		SelectWhere.Products.ProductID.EQ(o.ProductID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o ProductSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ProductSetter) error {
	return Products.Update(ctx, exec, &vals, o...)
}

func (o ProductSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Products.Delete(ctx, exec, o...)
}

func (o ProductSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	ProductIDPK := make([]int32, len(o))

	for i, o := range o {
		ProductIDPK[i] = o.ProductID
	}

	mods = append(mods,
		SelectWhere.Products.ProductID.In(ProductIDPK...),
	)

	o2, err := Products.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ProductID != old.ProductID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func productsJoinOrders[Q dialect.Joinable](from productColumns, typ string) func(context.Context) modAs[Q, orderColumns] {
	return func(ctx context.Context) modAs[Q, orderColumns] {
		return modAs[Q, orderColumns]{
			c: OrderColumns,
			f: func(to orderColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Orders.Name(ctx).As(to.Alias())).On(
						to.ProductID.EQ(from.ProductID),
					))
				}

				return mods
			},
		}
	}
}

// Orders starts a query for related objects on orders
func (o *Product) Orders(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) OrdersQuery {
	return Orders.Query(ctx, exec, append(mods,
		sm.Where(OrderColumns.ProductID.EQ(psql.Arg(o.ProductID))),
	)...)
}

func (os ProductSlice) Orders(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) OrdersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ProductID)
	}

	return Orders.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(OrderColumns.ProductID).In(PKArgs...)),
	)...)
}

func (o *Product) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Orders":
		rels, ok := retrieved.(OrderSlice)
		if !ok {
			return fmt.Errorf("product cannot load %T as %q", retrieved, name)
		}

		o.R.Orders = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Product = o
			}
		}
		return nil
	default:
		return fmt.Errorf("product has no relationship %q", name)
	}
}

func ThenLoadProductOrders(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadProductOrders(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load ProductOrders", retrieved)
		}

		err := loader.LoadProductOrders(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadProductOrders loads the product's Orders into the .R struct
func (o *Product) LoadProductOrders(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Orders = nil

	related, err := o.Orders(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Product = o
	}

	o.R.Orders = related
	return nil
}

// LoadProductOrders loads the product's Orders into the .R struct
func (os ProductSlice) LoadProductOrders(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	orders, err := os.Orders(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Orders = nil
	}

	for _, o := range os {
		for _, rel := range orders {
			if o.ProductID != rel.ProductID.GetOrZero() {
				continue
			}

			rel.R.Product = o

			o.R.Orders = append(o.R.Orders, rel)
		}
	}

	return nil
}

func insertProductOrders0(ctx context.Context, exec bob.Executor, orders1 []*OrderSetter, product0 *Product) (OrderSlice, error) {
	for i := range orders1 {
		orders1[i].ProductID = omitnull.From(product0.ProductID)
	}

	ret, err := Orders.InsertMany(ctx, exec, orders1...)
	if err != nil {
		return ret, fmt.Errorf("insertProductOrders0: %w", err)
	}

	return ret, nil
}

func attachProductOrders0(ctx context.Context, exec bob.Executor, count int, orders1 OrderSlice, product0 *Product) (OrderSlice, error) {
	setter := &OrderSetter{
		ProductID: omitnull.From(product0.ProductID),
	}

	err := Orders.Update(ctx, exec, setter, orders1...)
	if err != nil {
		return nil, fmt.Errorf("attachProductOrders0: %w", err)
	}

	return orders1, nil
}

func (product0 *Product) InsertOrders(ctx context.Context, exec bob.Executor, related ...*OrderSetter) error {
	if len(related) == 0 {
		return nil
	}

	orders1, err := insertProductOrders0(ctx, exec, related, product0)
	if err != nil {
		return err
	}

	product0.R.Orders = append(product0.R.Orders, orders1...)

	for _, rel := range orders1 {
		rel.R.Product = product0
	}
	return nil
}

func (product0 *Product) AttachOrders(ctx context.Context, exec bob.Executor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	orders1 := OrderSlice(related)

	_, err = attachProductOrders0(ctx, exec, len(related), orders1, product0)
	if err != nil {
		return err
	}

	product0.R.Orders = append(product0.R.Orders, orders1...)

	for _, rel := range related {
		rel.R.Product = product0
	}

	return nil
}
