// Code generated by BobGen psql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
)

// Customer is an object representing the database table.
type Customer struct {
	CustomerID int32  `db:"customer_id,pk" `
	FirstName  string `db:"first_name" `
	LastName   string `db:"last_name" `
	Email      string `db:"email" `

	R customerR `db:"-" `
}

// CustomerSlice is an alias for a slice of pointers to Customer.
// This should almost always be used instead of []*Customer.
type CustomerSlice []*Customer

// Customers contains methods to work with the customers table
var Customers = psql.NewTablex[*Customer, CustomerSlice, *CustomerSetter]("", "customers")

// CustomersQuery is a query on the customers table
type CustomersQuery = *psql.ViewQuery[*Customer, CustomerSlice]

// CustomersStmt is a prepared statment on customers
type CustomersStmt = bob.QueryStmt[*Customer, CustomerSlice]

// customerR is where relationships are stored.
type customerR struct {
	Orders OrderSlice // orders.orders_customer_id_fkey
}

// CustomerSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type CustomerSetter struct {
	CustomerID omit.Val[int32]  `db:"customer_id,pk" `
	FirstName  omit.Val[string] `db:"first_name" `
	LastName   omit.Val[string] `db:"last_name" `
	Email      omit.Val[string] `db:"email" `
}

func (s CustomerSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if !s.CustomerID.IsUnset() {
		vals = append(vals, "customer_id")
	}

	if !s.FirstName.IsUnset() {
		vals = append(vals, "first_name")
	}

	if !s.LastName.IsUnset() {
		vals = append(vals, "last_name")
	}

	if !s.Email.IsUnset() {
		vals = append(vals, "email")
	}

	return vals
}

func (s CustomerSetter) Overwrite(t *Customer) {
	if !s.CustomerID.IsUnset() {
		t.CustomerID, _ = s.CustomerID.Get()
	}
	if !s.FirstName.IsUnset() {
		t.FirstName, _ = s.FirstName.Get()
	}
	if !s.LastName.IsUnset() {
		t.LastName, _ = s.LastName.Get()
	}
	if !s.Email.IsUnset() {
		t.Email, _ = s.Email.Get()
	}
}

func (s CustomerSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 4)
	if s.CustomerID.IsUnset() {
		vals[0] = psql.Raw("DEFAULT")
	} else {
		vals[0] = psql.Arg(s.CustomerID)
	}

	if s.FirstName.IsUnset() {
		vals[1] = psql.Raw("DEFAULT")
	} else {
		vals[1] = psql.Arg(s.FirstName)
	}

	if s.LastName.IsUnset() {
		vals[2] = psql.Raw("DEFAULT")
	} else {
		vals[2] = psql.Arg(s.LastName)
	}

	if s.Email.IsUnset() {
		vals[3] = psql.Raw("DEFAULT")
	} else {
		vals[3] = psql.Arg(s.Email)
	}

	return im.Values(vals...)
}

func (s CustomerSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s CustomerSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if !s.CustomerID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "customer_id")...),
			psql.Arg(s.CustomerID),
		}})
	}

	if !s.FirstName.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "first_name")...),
			psql.Arg(s.FirstName),
		}})
	}

	if !s.LastName.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_name")...),
			psql.Arg(s.LastName),
		}})
	}

	if !s.Email.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "email")...),
			psql.Arg(s.Email),
		}})
	}

	return exprs
}

type customerColumnNames struct {
	CustomerID string
	FirstName  string
	LastName   string
	Email      string
}

var CustomerColumns = buildCustomerColumns("customers")

type customerColumns struct {
	tableAlias string
	CustomerID psql.Expression
	FirstName  psql.Expression
	LastName   psql.Expression
	Email      psql.Expression
}

func (c customerColumns) Alias() string {
	return c.tableAlias
}

func (customerColumns) AliasedAs(alias string) customerColumns {
	return buildCustomerColumns(alias)
}

func buildCustomerColumns(alias string) customerColumns {
	return customerColumns{
		tableAlias: alias,
		CustomerID: psql.Quote(alias, "customer_id"),
		FirstName:  psql.Quote(alias, "first_name"),
		LastName:   psql.Quote(alias, "last_name"),
		Email:      psql.Quote(alias, "email"),
	}
}

type customerWhere[Q psql.Filterable] struct {
	CustomerID psql.WhereMod[Q, int32]
	FirstName  psql.WhereMod[Q, string]
	LastName   psql.WhereMod[Q, string]
	Email      psql.WhereMod[Q, string]
}

func (customerWhere[Q]) AliasedAs(alias string) customerWhere[Q] {
	return buildCustomerWhere[Q](buildCustomerColumns(alias))
}

func buildCustomerWhere[Q psql.Filterable](cols customerColumns) customerWhere[Q] {
	return customerWhere[Q]{
		CustomerID: psql.Where[Q, int32](cols.CustomerID),
		FirstName:  psql.Where[Q, string](cols.FirstName),
		LastName:   psql.Where[Q, string](cols.LastName),
		Email:      psql.Where[Q, string](cols.Email),
	}
}

type customerJoins[Q dialect.Joinable] struct {
	typ    string
	Orders func(context.Context) modAs[Q, orderColumns]
}

func (j customerJoins[Q]) aliasedAs(alias string) customerJoins[Q] {
	return buildCustomerJoins[Q](buildCustomerColumns(alias), j.typ)
}

func buildCustomerJoins[Q dialect.Joinable](cols customerColumns, typ string) customerJoins[Q] {
	return customerJoins[Q]{
		typ:    typ,
		Orders: customersJoinOrders[Q](cols, typ),
	}
}

// FindCustomer retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindCustomer(ctx context.Context, exec bob.Executor, CustomerIDPK int32, cols ...string) (*Customer, error) {
	if len(cols) == 0 {
		return Customers.Query(
			ctx, exec,
			SelectWhere.Customers.CustomerID.EQ(CustomerIDPK),
		).One()
	}

	return Customers.Query(
		ctx, exec,
		SelectWhere.Customers.CustomerID.EQ(CustomerIDPK),
		sm.Columns(Customers.Columns().Only(cols...)),
	).One()
}

// CustomerExists checks the presence of a single record by primary key
func CustomerExists(ctx context.Context, exec bob.Executor, CustomerIDPK int32) (bool, error) {
	return Customers.Query(
		ctx, exec,
		SelectWhere.Customers.CustomerID.EQ(CustomerIDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Customer
func (o *Customer) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.CustomerID)
}

// Update uses an executor to update the Customer
func (o *Customer) Update(ctx context.Context, exec bob.Executor, s *CustomerSetter) error {
	return Customers.Update(ctx, exec, s, o)
}

// Delete deletes a single Customer record with an executor
func (o *Customer) Delete(ctx context.Context, exec bob.Executor) error {
	return Customers.Delete(ctx, exec, o)
}

// Reload refreshes the Customer using the executor
func (o *Customer) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Customers.Query(
		ctx, exec,
		SelectWhere.Customers.CustomerID.EQ(o.CustomerID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o CustomerSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals CustomerSetter) error {
	return Customers.Update(ctx, exec, &vals, o...)
}

func (o CustomerSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Customers.Delete(ctx, exec, o...)
}

func (o CustomerSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	CustomerIDPK := make([]int32, len(o))

	for i, o := range o {
		CustomerIDPK[i] = o.CustomerID
	}

	mods = append(mods,
		SelectWhere.Customers.CustomerID.In(CustomerIDPK...),
	)

	o2, err := Customers.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.CustomerID != old.CustomerID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func customersJoinOrders[Q dialect.Joinable](from customerColumns, typ string) func(context.Context) modAs[Q, orderColumns] {
	return func(ctx context.Context) modAs[Q, orderColumns] {
		return modAs[Q, orderColumns]{
			c: OrderColumns,
			f: func(to orderColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Orders.Name(ctx).As(to.Alias())).On(
						to.CustomerID.EQ(from.CustomerID),
					))
				}

				return mods
			},
		}
	}
}

// Orders starts a query for related objects on orders
func (o *Customer) Orders(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) OrdersQuery {
	return Orders.Query(ctx, exec, append(mods,
		sm.Where(OrderColumns.CustomerID.EQ(psql.Arg(o.CustomerID))),
	)...)
}

func (os CustomerSlice) Orders(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) OrdersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.CustomerID)
	}

	return Orders.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(OrderColumns.CustomerID).In(PKArgs...)),
	)...)
}

func (o *Customer) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Orders":
		rels, ok := retrieved.(OrderSlice)
		if !ok {
			return fmt.Errorf("customer cannot load %T as %q", retrieved, name)
		}

		o.R.Orders = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Customer = o
			}
		}
		return nil
	default:
		return fmt.Errorf("customer has no relationship %q", name)
	}
}

func ThenLoadCustomerOrders(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadCustomerOrders(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load CustomerOrders", retrieved)
		}

		err := loader.LoadCustomerOrders(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadCustomerOrders loads the customer's Orders into the .R struct
func (o *Customer) LoadCustomerOrders(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Orders = nil

	related, err := o.Orders(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Customer = o
	}

	o.R.Orders = related
	return nil
}

// LoadCustomerOrders loads the customer's Orders into the .R struct
func (os CustomerSlice) LoadCustomerOrders(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	orders, err := os.Orders(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Orders = nil
	}

	for _, o := range os {
		for _, rel := range orders {
			if o.CustomerID != rel.CustomerID.GetOrZero() {
				continue
			}

			rel.R.Customer = o

			o.R.Orders = append(o.R.Orders, rel)
		}
	}

	return nil
}

func insertCustomerOrders0(ctx context.Context, exec bob.Executor, orders1 []*OrderSetter, customer0 *Customer) (OrderSlice, error) {
	for i := range orders1 {
		orders1[i].CustomerID = omitnull.From(customer0.CustomerID)
	}

	ret, err := Orders.InsertMany(ctx, exec, orders1...)
	if err != nil {
		return ret, fmt.Errorf("insertCustomerOrders0: %w", err)
	}

	return ret, nil
}

func attachCustomerOrders0(ctx context.Context, exec bob.Executor, count int, orders1 OrderSlice, customer0 *Customer) (OrderSlice, error) {
	setter := &OrderSetter{
		CustomerID: omitnull.From(customer0.CustomerID),
	}

	err := Orders.Update(ctx, exec, setter, orders1...)
	if err != nil {
		return nil, fmt.Errorf("attachCustomerOrders0: %w", err)
	}

	return orders1, nil
}

func (customer0 *Customer) InsertOrders(ctx context.Context, exec bob.Executor, related ...*OrderSetter) error {
	if len(related) == 0 {
		return nil
	}

	orders1, err := insertCustomerOrders0(ctx, exec, related, customer0)
	if err != nil {
		return err
	}

	customer0.R.Orders = append(customer0.R.Orders, orders1...)

	for _, rel := range orders1 {
		rel.R.Customer = customer0
	}
	return nil
}

func (customer0 *Customer) AttachOrders(ctx context.Context, exec bob.Executor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	orders1 := OrderSlice(related)

	_, err = attachCustomerOrders0(ctx, exec, len(related), orders1, customer0)
	if err != nil {
		return err
	}

	customer0.R.Orders = append(customer0.R.Orders, orders1...)

	for _, rel := range related {
		rel.R.Customer = customer0
	}

	return nil
}
