// Code generated by BobGen psql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "pickle_store/models"
)

type CustomerMod interface {
	Apply(*CustomerTemplate)
}

type CustomerModFunc func(*CustomerTemplate)

func (f CustomerModFunc) Apply(n *CustomerTemplate) {
	f(n)
}

type CustomerModSlice []CustomerMod

func (mods CustomerModSlice) Apply(n *CustomerTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// CustomerTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type CustomerTemplate struct {
	CustomerID func() int32
	FirstName  func() string
	LastName   func() string
	Email      func() string

	r customerR
	f *Factory
}

type customerR struct {
	Orders []*customerROrdersR
}

type customerROrdersR struct {
	number int
	o      *OrderTemplate
}

// Apply mods to the CustomerTemplate
func (o *CustomerTemplate) Apply(mods ...CustomerMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Customer
// this does nothing with the relationship templates
func (o CustomerTemplate) toModel() *models.Customer {
	m := &models.Customer{}

	if o.CustomerID != nil {
		m.CustomerID = o.CustomerID()
	}
	if o.FirstName != nil {
		m.FirstName = o.FirstName()
	}
	if o.LastName != nil {
		m.LastName = o.LastName()
	}
	if o.Email != nil {
		m.Email = o.Email()
	}

	return m
}

// toModels returns an models.CustomerSlice
// this does nothing with the relationship templates
func (o CustomerTemplate) toModels(number int) models.CustomerSlice {
	m := make(models.CustomerSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Customer
// according to the relationships in the template. Nothing is inserted into the db
func (t CustomerTemplate) setModelRels(o *models.Customer) {
	if t.r.Orders != nil {
		rel := models.OrderSlice{}
		for _, r := range t.r.Orders {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.CustomerID = null.From(o.CustomerID)
				rel.R.Customer = o
			}
			rel = append(rel, related...)
		}
		o.R.Orders = rel
	}
}

// BuildSetter returns an *models.CustomerSetter
// this does nothing with the relationship templates
func (o CustomerTemplate) BuildSetter() *models.CustomerSetter {
	m := &models.CustomerSetter{}

	if o.CustomerID != nil {
		m.CustomerID = omit.From(o.CustomerID())
	}
	if o.FirstName != nil {
		m.FirstName = omit.From(o.FirstName())
	}
	if o.LastName != nil {
		m.LastName = omit.From(o.LastName())
	}
	if o.Email != nil {
		m.Email = omit.From(o.Email())
	}

	return m
}

// BuildManySetter returns an []*models.CustomerSetter
// this does nothing with the relationship templates
func (o CustomerTemplate) BuildManySetter(number int) []*models.CustomerSetter {
	m := make([]*models.CustomerSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Customer
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CustomerTemplate.Create
func (o CustomerTemplate) Build() *models.Customer {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.CustomerSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CustomerTemplate.CreateMany
func (o CustomerTemplate) BuildMany(number int) models.CustomerSlice {
	m := make(models.CustomerSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableCustomer(m *models.CustomerSetter) {
	if m.FirstName.IsUnset() {
		m.FirstName = omit.From(random_string(nil))
	}
	if m.LastName.IsUnset() {
		m.LastName = omit.From(random_string(nil))
	}
	if m.Email.IsUnset() {
		m.Email = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Customer
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *CustomerTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Customer) (context.Context, error) {
	var err error

	if o.r.Orders != nil {
		for _, r := range o.r.Orders {
			var rel0 models.OrderSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachOrders(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a customer and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *CustomerTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Customer, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a customer and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *CustomerTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Customer {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a customer and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *CustomerTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Customer {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a customer and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *CustomerTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Customer, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableCustomer(opt)

	m, err := models.Customers.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = customerCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple customers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o CustomerTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.CustomerSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple customers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o CustomerTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.CustomerSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple customers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o CustomerTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.CustomerSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple customers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o CustomerTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.CustomerSlice, error) {
	var err error
	m := make(models.CustomerSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Customer has methods that act as mods for the CustomerTemplate
var CustomerMods customerMods

type customerMods struct{}

func (m customerMods) RandomizeAllColumns(f *faker.Faker) CustomerMod {
	return CustomerModSlice{
		CustomerMods.RandomCustomerID(f),
		CustomerMods.RandomFirstName(f),
		CustomerMods.RandomLastName(f),
		CustomerMods.RandomEmail(f),
	}
}

// Set the model columns to this value
func (m customerMods) CustomerID(val int32) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.CustomerID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m customerMods) CustomerIDFunc(f func() int32) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.CustomerID = f
	})
}

// Clear any values for the column
func (m customerMods) UnsetCustomerID() CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.CustomerID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m customerMods) RandomCustomerID(f *faker.Faker) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.CustomerID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m customerMods) FirstName(val string) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.FirstName = func() string { return val }
	})
}

// Set the Column from the function
func (m customerMods) FirstNameFunc(f func() string) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.FirstName = f
	})
}

// Clear any values for the column
func (m customerMods) UnsetFirstName() CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.FirstName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m customerMods) RandomFirstName(f *faker.Faker) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.FirstName = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m customerMods) LastName(val string) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.LastName = func() string { return val }
	})
}

// Set the Column from the function
func (m customerMods) LastNameFunc(f func() string) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.LastName = f
	})
}

// Clear any values for the column
func (m customerMods) UnsetLastName() CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.LastName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m customerMods) RandomLastName(f *faker.Faker) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.LastName = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m customerMods) Email(val string) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.Email = func() string { return val }
	})
}

// Set the Column from the function
func (m customerMods) EmailFunc(f func() string) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.Email = f
	})
}

// Clear any values for the column
func (m customerMods) UnsetEmail() CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.Email = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m customerMods) RandomEmail(f *faker.Faker) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.Email = func() string {
			return random_string(f)
		}
	})
}

func (m customerMods) WithOrders(number int, related *OrderTemplate) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.r.Orders = []*customerROrdersR{{
			number: number,
			o:      related,
		}}
	})
}

func (m customerMods) WithNewOrders(number int, mods ...OrderMod) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		related := o.f.NewOrder(mods...)
		m.WithOrders(number, related).Apply(o)
	})
}

func (m customerMods) AddOrders(number int, related *OrderTemplate) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.r.Orders = append(o.r.Orders, &customerROrdersR{
			number: number,
			o:      related,
		})
	})
}

func (m customerMods) AddNewOrders(number int, mods ...OrderMod) CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		related := o.f.NewOrder(mods...)
		m.AddOrders(number, related).Apply(o)
	})
}

func (m customerMods) WithoutOrders() CustomerMod {
	return CustomerModFunc(func(o *CustomerTemplate) {
		o.r.Orders = nil
	})
}
